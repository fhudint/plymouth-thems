/*********************************************************************************
 * Theme Name: COGWHEEL-A-SPINNER-LOG-PGR-2-GRAY                                 *
 * Version: 1.0                                                                  *
 * Description: ...                                                                 *
 * Author: DUKE93                                                                *
 * Date: 22.12.2020                                                              *
 * License: This program is free software: you can redistribute it and/or modify *
 * it under the terms of the GNU General Public License as published by          *
 * the Free Software Foundation, either version 3 of the License, or             *
 * (at your option) any later version.                                           *
 *                                                                               *
 * This program is distributed in the hope that it will be useful,               *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 *
 * GNU General Public License for more details.                                  *
 *                                                                               *
 * You should have received a copy of the GNU General Public License             *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.         *
 *********************************************************************************/

############################### BACKGROUND #####################################
screen_width = Window.GetWidth();
screen_height = Window.GetHeight();
screen_x = Window.GetX();
screen_y = Window.GetY();
background_image = Image("BACKGROUND.PNG");
ratio = screen_height / screen_width;
background_ratio = background_image.GetHeight() / background_image.GetWidth();
factor = 0;

if (ratio > background_ratio) {

	factor = screen_height / background_image.GetHeight();

}
else {
	
	factor = screen_width / background_image.GetWidth();
	
}
/*scaled = background_image.Scale(background_image.GetWidth() * factor, background_image.GetHeight() * factor);
background_sprite = Sprite(scaled);
background_sprite.SetX(screen_x + screen_width / 2 - scaled.GetWidth() / 2);
background_sprite.SetY(screen_y + screen_height / 2 - scaled.GetHeight() / 2);*/
//*******************// растянуть на весь экран
background.image = background_image.Scale(Window.GetWidth() , Window.GetHeight());
background.sprite = SpriteNew();
background.sprite.SetImage(background.image);
background.sprite.SetPosition(Window.GetX(), Window.GetY(), 1);
################################################################################

################################## LOGO ########################################
/*Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

logo.image = Image("SYSTEM-LOGO.PNG");
logo.sprite = Sprite(logo.image);
logo.sprite.SetX (Window.GetWidth()  / 1 - logo.image.GetWidth()  / 0.88);
logo.sprite.SetY (Window.GetHeight() / 1 - logo.image.GetHeight() / 0.65);
logo.opacity_angle = 0;*/
################################################################################

################################# BACKDROP #####################################
backdrop = Image("LOGO_BOX.PNG");
boot = Sprite(backdrop);
boot.SetOpacity(1); // hidden for now
//boot_x = Window.GetWidth() / 2.1  -  backdrop.GetWidth() / 2.45;
boot_x = Window.GetWidth() / 2  -  backdrop.GetWidth() / 2;                     // позиция логотипа X
//boot_y = Window.GetHeight() / 2.1  -  backdrop.GetHeight() / 0.812;
boot_y = Window.GetHeight() / 2  -  backdrop.GetHeight() / 1.5;                 // позиция логотипа Y
boot.SetPosition( boot_x, boot_y, 1);
################################################################################

################################## LOGO ########################################
Window.SetBackgroundTopColor(0, 0, 0);
Window.SetBackgroundBottomColor(0, 0, 0);

logo.image = Image("SYSTEM-LOGO.PNG");
logo.sprite = Sprite(logo.image);
logo.sprite.SetX (boot_x + backdrop.GetWidth()/2 - logo.image.image.GetWidth()/2);
logo.sprite.SetY (Window.GetHeight() / 1 - logo.image.GetHeight() / 0.65);
logo.opacity_angle = 0;
################################################################################

################################# PROGRESS #####################################
NB_ROTATION_STEPS = 70;
NB_REFRESHS_BETWEEN_ANIMS = 3;
# Initial position of the center of the logo in % of background
DEBIAN_POS_PCT.y = 0.65; # Debian image position in % of screen height
DEBIAN_HEIGHT_PCT = 0.07; # Debian image height in % of smallest screen dimension
LOGO_CENTER_PCT.x = 0.5; # Debian swirl image position in % of screen height & width
LOGO_CENTER_PCT.y = 0.442;
LOGO_SIZE_PCT = 0.18; # Debian swirl image size in % of smallest screen dimension

// **************************************** //

# Compute screen/image ratio and scale the background accordingly
window_max.width = Window.GetX() * 2 + Window.GetWidth();
window_max.height = Window.GetY() * 2 + Window.GetHeight();
screen_ratio = window_max.width / window_max.height;
small_dimension = Math.Min(window_max.width, window_max.height);
//Debug("Window.GetX():" + Window.GetX() + ", Window.GetY():" + Window.GetY());
//Debug("Window is [" + window_max.width + ";" + window_max.height + "], ratio=" + screen_ratio);
debian_height = small_dimension * DEBIAN_HEIGHT_PCT;
debian_pos.y = window_max.height * DEBIAN_POS_PCT.y - debian_height/2;
logo_size = small_dimension * LOGO_SIZE_PCT;
logo_center.x = window_max.width * LOGO_CENTER_PCT.x;
logo_center.y = window_max.height * LOGO_CENTER_PCT.y;
//Debug("Logo center at [" + logo_center.x + ";" + logo_center.y + "], size=" + logo_size + "px");
logo_pos.x = logo_center.x - logo_size/2;
logo_pos.y = logo_center.y - logo_size/2;

// **************************************** //

/*debian.image = Image("LOGO.PNG");
debian_sprite = Sprite(debian.image);
debian.x = boot_x + 121;
//debian.x = boot_x + backdrop.GetWidth()/2 - debian.image.GetWidth()/2
debian.y = boot_y + 50;
// Target same height as logo
debian_scale_factor = debian_height / debian.GetHeight();
//debian = debian.Scale(debian.GetWidth()  * debian_scale_factor, debian.GetHeight() * debian_scale_factor);
debian_sprite.SetPosition(debian.x, debian.y, 5);
//debian_sprite.SetPosition(window_max.width / 2 - debian.GetWidth() / 2, debian_pos.y, +90);*/
################################################################################

################################# PROGRESS BAR #################################
progress_bar.original_image = Image("PROGRESS_BAR.PNG");
progress_bar.sprite = Sprite();

progress_bar.x = boot_x + 126;
//progress_bar.x = boot_x + backdrop.GetWidth()/2 - progress_bar.original_image.GetWidth()/2;
progress_bar.y = boot_y + 353;
progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 6);

fun progress_callback (duration, progress)
  {
    if (progress_bar.image.GetWidth () != Math.Int (249 * progress))
      {
        progress_bar.image = progress_bar.original_image.Scale(249 * progress, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage (progress_bar.image);
      }
  }

progress_box.image = Image("PROGRESS_BOX.PNG");
progress_box.sprite = Sprite(progress_box.image);

//progress_box.x = boot_x + 120;
progress_box.x = boot_x + backdrop.GetWidth()/2 - progress_box.image.GetWidth()/2;
progress_box.y = boot_y + 350;
progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 5);

// **************************************** //

progress_text.image = Image.Text(progress_t + "%",255,255,255,1,progressfont);
progress_text.sprite = Sprite();

progress_text.x = boot_x + 336; // позиция % по X
progress_text.y = boot_y + 330; // позиция % по Y
progress_text.sprite.SetPosition(progress_text.x, progress_text.y, 6);



fun progress_callback (duration, progress)
  {
    if (progress_bar.image.GetWidth () != Math.Int (progress_bar.original_image.GetWidth () * progress))
      {
        progress_bar.image = progress_bar.original_image.Scale(progress_bar.original_image.GetWidth(progress_bar.original_image) * progress, progress_bar.original_image.GetHeight());
        progress_bar.sprite.SetImage (progress_bar.image);
        f = Math.Int (progress_bar.image.GetWidth () /progress_bar.original_image.GetWidth () * 100 );
        progress_t.image = Image.Text(f + "%",255,255,255,1,progressfont);
    progress_text.sprite.SetImage(progress_t.image);
      }
  }

Plymouth.SetBootProgressFunction(progress_callback);
################################################################################

################################## DIALOG ######################################
status = "normal";
//count = 0;

fun dialog_setup()
  {
    local.box;
    local.lock;
    local.entry;
    local.prompt_sprite;
    
    box.image = Image("BOX.PNG");
    lock.image = Image("LOCK.PNG");
    entry.image = Image("ENTRY.PNG");
    
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2.00 - box.image.GetWidth () / 2;
    box.y = Window.GetHeight() / 1.10 - box.image.GetHeight() / 1.10;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);

    lock.sprite = Sprite(lock.image);
    //lock.x = box.x + box.image.GetWidth()/3 - (lock.image.GetWidth() + entry.image.GetWidth()) / 30;
    lock.x = box.x + 230;
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 2;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);

    entry.sprite = Sprite(entry.image);
    //entry.x = lock.x + lock.image.GetWidth();
    entry.x = box.x + 1;
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);

    prompt_sprite = SpriteNew();
    prompt_sprite.SetPosition(box.x + 26, box.y - 20, box.z);
    
    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.bullet_image = Image("BULLET.PNG");
    global.dialog.prompt_sprite = prompt_sprite;
    dialog_opacity (1);
  }
    
fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    dialog.prompt_sprite.SetOpacity(opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
    dialog_setup();
    else
    dialog_opacity(1);
    dialog.prompt_sprite.SetImage(Image.Text(prompt, 0.5, 0.5, 0.5));
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            dialog.bullet[index].sprite = Sprite(dialog.bullet_image);
            dialog.bullet[index].x = dialog.entry.x + index * dialog.bullet_image.GetWidth() / 0.9 - dialog.entry.image.GetHeight() * -0.2; // отступ точки от точки и от поля (modified)
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.bullet_image.GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

fun display_message_callback (prompt)
  {
  
prompt = Image.Text(prompt,0.5,0.5,0.5,1);
sprite_prompt.SetImage(prompt);
sprite_prompt.SetPosition(Window.GetX() + (Window.GetWidth() - prompt.GetWidth()) / 2, Window.GetY() + Window.GetHeight() * 0.90, 2);
  }

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);
Plymouth.SetMessageFunction(display_message_callback);
################################################################################

#################################### TEXT ######################################
maximum_msg = 5;
ubuntufont = "Ubuntu Mono Regular 9";
perfont = "Ubuntu Regular 11";
progressfont = "Ubuntu Mono Regular 9";
starting_text = "Starting up...";
bye_text = "System is shutting down";
progress_t= 0;
fun_curve_linear = 0;
fun_curve_in = 1;
fun_curve_out = 2;
fun_curve_in_out = 3;
radiant_factor = Math.Pi / 180;
math_pi2 = Math.Pi / 2;
dots = 5;
show_progress = 0;
fade_out_dots = 1;
fps = 13;
#anim_duration = 1600;
#anim_frames = anim_duration / 1000 * fps;

// **************************************** //

  if (Plymouth.GetMode () == "boot")
     {
        text.image = Image.Text (starting_text,1.0,1.0,1.0,1, ubuntufont);
        text.sprite = Sprite(text.image);
        text.x = boot_x + 136; // Booting... X        
        text.y = boot_y + 330;
        text.sprite.SetPosition(text.x, text.y, 2);
      }
  else
     {
        text_end.image = Image.Text (bye_text,1.0,1.0,1.0,1, ubuntufont);
        text_end.sprite = Sprite(text_end.image);
        text_end.x = boot_x + 136; // Shutting down X
        text_end.y = boot_y + 330;
        text_end.sprite.SetPosition(text_end.x, text_end.y, 6);
      }

// **************************************** //

	per.image = Image.Text ("Powered by GNU/Linux",0.5,0.5,0.5,1, perfont);
        per.sprite = Sprite(per.image);
        per.x = Window.GetX() + Window.GetWidth()  / 1 - per.image.GetWidth() / 0.91;
        per.y = Window.GetY() + Window.GetHeight() / 1.01  - per.image.GetHeight() / 1;
        per.sprite.SetPosition(per.x, per.y, 2);
        
// **************************************** //
################################################################################

################################## ******** ####################################
/*progress_image = Image("LOGO.PNG");
progress.sprite = Sprite(progress_image);
progress.sprite.SetX = boot_x + backdrop.GetWidth()/2 - progress_image.GetWidth()/2;
//progress_sprite.x = boot_x + 1000;
//progress.sprite.SetY (Window.GetHeight() / 1.5 - progress_image.GetHeight() / 1.5);
progress_sprite.SetY = boot_y + 300;
progress_sprite.SetPosition(Window.GetX(), Window.GetY(), +5);
progress.opacity_angle = 1;
Plymouth.SetRefreshFunction(refresh);*/
################################################################################

################################## SPINNER #####################################
spin = 0;

/*
 * this function only goes up to 100
 * because thats all thats needed for
 * the progress meter bar */
fun atoi(str) {
   
    int = -1;
   
    for (i = 0; i <= 100; i++) {
    
        if (i + "" == str) {
            
            int = i;
            
            break;
        
        }
    
    }
    
    return int;

}

/*
 * This handler will/can be invoked
 * 50 times per second.
 * 
 * According to the previous author of the
 * splash script, without this callback
 * the screen is not updated correctly */
spinner_sprite;
spinner;

fun refreshHandler() {
	
	if (spin < 3.14 * 2) {
	
		spin = spin + 0.14;
	
	}
	else {
	
		spin = 0;
	
	}
	
	/* if fsck is running or the password is prompted, hide the spinner */
	if (fsck_running == 1 || passw_dialog_input_sprite.GetOpacity() == 1) {
	
		spinner_sprite.SetOpacity(0);
	
	} else {
	
		spinner = Image("SPINNER.PNG");
		spinner = spinner.Rotate(spin);
		spinner_sprite = Sprite(spinner);
		//spinner_sprite.x = boot_x + 45;
        spinner_sprite.x = boot_x + backdrop.GetWidth()/2 - spinner.GetWidth()/2;
	    spinner_sprite.y = boot_y + 100; // позиция по оси Y
        spinner_sprite.SetPosition(spinner_sprite.x, spinner_sprite.y, 5); // позиция за или перед
	
	}
	
	if (fade_dir == 0) {
		
		counter++;
		
		if (counter >= 200) {
			
			fade_dir = 1;
		
		}
		
	}
	else {
		
		counter--;
		
		if (counter <= 0) {
			
			fade_dir = 0;
		
		}
		
	}
	
	if ((fsck_running == 1) && (fsck_done_fading == 0)) {
		
		
		fsck_progress_meter_sprite.SetOpacity(fsck_fade_in_counter);
		fsck_progress_fade_sprite.SetOpacity(fsck_fade_in_counter);
		
		if (fsck_fade_in_counter < 1) {
		
			fsck_fade_in_counter+= 0.025;
		
		}
		else {
			
			fsck_done_fading = 1;
			
		}
		
	}
	
}

Plymouth.SetRefreshFunction (refreshHandler);
################################################################################

##################################### LOG ######################################
NUM_SCROLL_LINES=19; //количество строк лога
LINE_WIDTH=9999; //ширина строк лога

message_sprite=SpriteNew();

fun message_callback (prompt) {
 message = Image.Text(prompt, 1.0, 1.0, 1.0);
 message_sprite.SetImage(message);
// message_sprite.SetPosition(Window.GetX() + (Window.GetWidth() - message.GetWidth()) / 2, Window.GetY() + Window.GetHeight() * 0.93, 9);
 message_sprite.SetPosition(Window.GetX() + (Window.GetWidth() - message.GetWidth()) / 2, Window.GetY() + Window.GetHeight() * 0.93, 9);
 message_sprite.SetOpacity(1);
}

Plymouth.SetMessageFunction(message_callback);


// Initialising text images and their positions
// 20 is the height (including line spacing) of each line
for (i=0; i < NUM_SCROLL_LINES; i++) {
  lines[i]= Image.Text("", 1.0, 1.0, 1.0); //цвет строк
  message_sprite[i] = SpriteNew();
  //message_sprite[i].SetPosition(screen_width / 5, (screen_height / 1.50) + (i * 16), 9);
  message_sprite[i].SetPosition(15, (screen_height / 1.50) + (i * 17), 9);
}                                    //высота строк           //отступ строк


fun StringLength(string) {

  index = 0;
  str = String(string);
  while(str.CharAt(index)) index++;
  return index;
}



fun scroll_message_callback(text) {

//  Truncate the message if too long
   if (StringLength(text) > LINE_WIDTH) {
     text = text.SubString(0, LINE_WIDTH - 3);
     text += "...";
   }

//  Shift message one up
   for (i = 0; i < NUM_SCROLL_LINES - 1; i++) {
     lines[i] = lines[i+1];
   }

//  Create the image for the latest message
   lines[i] = Image.Text(text, 1.0, 1.0, 1.0);

//  Re-positioning the text images
   for (i = 0; i < NUM_SCROLL_LINES; i++) {
     message_sprite[i].SetImage(lines[i]);
   }
}

Plymouth.SetUpdateStatusFunction(scroll_message_callback);
################################################################################

##################################### QUIT #####################################

fun quit_callback ()
{
 anim.sprite.SetOpacity (0);
  if (Plymouth.GetMode() == "shutdown") {
   motif.sprite.SetOpacity(0);
  }
}

Plymouth.SetQuitFunction(quit_callback);
################################################################################
